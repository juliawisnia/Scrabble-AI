The linked list returned by funcA is the list 5, 4, 3, 2, 1, so what this
program is doing is reversing the linked list put in. When I trace through the
program, I see that funcA is running through the linked list, being recursively
called until out (funcA(in->next)) is pointing to the last element in the 
linked list, so in is pointing to the second to last element. After this, funcA
will return in, and start calling funcB. Tracing through funcB, I see that on
the first call, it will return in2->next=in1, so instead of the last element's 
next pointer pointing to NULL, it will point to the element before it. Once this
happens, the if statement will be triggered, calling funcB recursively, and keep
flipping each element's pointers to point to the element before it. Once this 
recursion completes, it will return to funcA, set the final (which used to be
the first) element's next pointer to NULL, and finally return out, which is now
pointing to the beginning of the linked list, so pointing to the new first
element, which used to be the last.